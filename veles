#!/usr/bin/env lua

local function read_file(file)
    local f = io.open(file, "rb")
    local content = f:read("*all")
    f:close()
    return content
end

local function contents_to_array(content)
    local array = {}
    for line in content:gmatch("[^\n]+") do
        table.insert(array, line)
    end
    return array
end

local function extract_repeat_count(line)
    if line:find("x", 1, true) then
        local repeat_amount = line:match("x(%d+)")
        return tonumber(repeat_amount) - 1
    end
end

local function extract_sections(array)
    local sections = {}
    local section_start = 1
    local section_end = 1
    for i, line in ipairs(array) do
        -- Find the start of a section by search for `[` and the line doesn't match `[end]`.
        if line:find("[", 1, true) and not line:find("[end]", 1, true) then
            section_start = i
        -- Find the end of the section by searching for `[end]`.
        elseif line:find("[end]", 1, true) then
            section_end = i
            -- Add the section to the list of sections.
            table.insert(sections, {start = section_start, end_ = section_end})
        end
    end
    return sections
end

-- The lyrics file to read.
local lyrics = read_file(arg[1])
-- Split the lyrics into an array of lines.
local lines = contents_to_array(lyrics)
-- Extract the sections of the lyrics.
local sections = extract_sections(lines)
-- TODO: Fix newline spacing between sections, currently it sometimes does double newlines.
-- TODO: Find variables (e.g. `<Chorus>`) and expand them into the defined sections, currently they are just ignored.
local output = {}
for i, section in ipairs(sections) do
    for j = section.start, section.end_ do
        -- If the line is a section declaration...
        if lines[j]:find("[", 1, true) then
            -- Find the repeat count...
            is_section = true
            local repeat_amount = extract_repeat_count(lines[j])
            if repeat_amount then
                -- If the repeat count is greater than 1, then we need to repeat the section.
                if repeat_amount > 1 then
                    -- Repeat the section.
                    for k = 1, repeat_amount do
                        for l = section.start, section.end_ do
                            -- Remove any section declarations.
                            local line = lines[l]:gsub("%[.*]$", "")
                            -- Add the line to the output.
                            table.insert(output, line)
                        end
                    end
                else
                    -- Otherwise, just print the section.
                    for l = section.start, section.end_ do
                        local line  = lines[l]:gsub("%[.*]$", "")
                        table.insert(output, line)
                    end
                end
            end
        else
            -- Otherwise, just print the line.
            -- TODO: I need better logic for determining whether or not to print the line,
            -- because currently it will sometimes duplicate lines or print reduntant empty lines.
            if is_section then
                local line = lines[j]:gsub("%[.*]$", "")
                table.insert(output, line)
                is_section = false
            else
                -- We need to skip over the first line of the section.
                local line = lines[j + 1]:gsub("%[.*]$", "")
                table.insert(output, line)
            end
        end
    end
end

print(table.concat(output, "\n"))
